#-------------------------------------------------------------------------------
## Orb: cypress-io/cypress
# https://circleci.com/developer/orbs/orb/cypress-io/cypress
# CircleCIの設定に時間をかけることなく、Cypress.ioのe2eのブラウザテストを実行可能
# Cypress Dashboardに結果を記録したり、パラレルモードでテストをいい感じに負荷分散することも可能
# ダッシュボードに記録する場合は、CI環境変数に `CYPRESS_RECORD_KEY` の設定が必要
#
## Orb: codecov/codecov
# 複雑な設定をすることなく、カバレッジレポートをCodecovにアップロード可能
# カバレッジの結果を素早く得ることができるので、安心してコードをコミットすることが可能
# メモ：CI環境変数に `CODECOV_TOKEN` の設定が必要
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# $ git diff upstream/develop .circleci/config.yml
# すると、win版もあったことがわかる
#
# しかし、Win版のテストの時circle/ci@2.4.0のorbが使われているが以下のエラーが出る
# ```
# failed to create host: Image windows-server-2019 is not compatible with resource class l1.medium
# ```
# https://github.com/CircleCI-Public/windows-preview-docs/issues/11
# を見ると、多分Free planでは使えなさそう => 消す
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# もしpercy周りで以下のエラーが出たら
# ```
# Warning: Skipping visual tests. PERCY_TOKEN was not provided.
# ```
# 1. percyに登録、PERCY_TOKENを発行して
# 2. Create new project
# 3. プロジェクト名はなんでもいい。自分は「Cypressが作ってくれたRealWorldApp」とした
# 4. GitHubリポジトリをprojectと紐付け
# 5. percyのプロジェクトのダッシュボードにて、下の方にProject tokenとしてPERCY_TOKENがある
# 6. PERCY_TOKENをCircleCIの環境変数として埋め込む
# 7. CircleCIをRerun
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# もしCypress周りで以下のエラーが出たら
# ```
# You passed the --record flag but did not provide us your Record Key.
# ...
# You can also set the key as an environment variable with the name CYPRESS_RECORD_KEY.
# ```
# 1. Cypress に登録
# 2. https://dashboard.cypress.io
# 3. Create New Project
# 4. プロジェクト名はなんでもいい。自分は「Cypressが作ってくれたRealWorldApp」とした
# 5. プロジェクトのダッシュボードにてprojectIdをコピーしてリポジトリのcypress.jsonに埋め込む
# 6. プロジェクトのダッシュボードにて以下のようなコードが有り、CYPRESS_RECORD_KEYとしてCircleCIの環境変数に埋め込む
#
# ```
# npx cypress run --record --key ${CYPRESS_RECORD_KEY}
# ```
#
# 7. cypress.jsonをコミットしてpush(CircleCIがまた動くはず)
# 8. CircleCIで確認
#-------------------------------------------------------------------------------


version: 2.1
orbs:
  cypress: cypress-io/cypress@1.29.0
  codecov: codecov/codecov@1.2.3 #

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Executor ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# 各ワークフローではExectorを指定する必要がある
# それをここで共通して宣言しておく
# 使い方
#
# ```
# executors:
#   ${executor名A}:
#     ...
#
# ${ワークフロー名}:
#   jobs:
#     - ${jobタイトル(Orbsで指定されてたりもする)}:
#         name: ${ちょっと詳しくした名前}
#         ...
#         executor: ${executor名A} # <=== ここ
# ```
#
# resource_classを指定するならFree planは無理なので削除する
#
executors:
  with-chrome-and-firefox:
    docker:
      - image: "cypress/browsers:node14.17.0-chrome88-ff89"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Commands ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# オリジナルコマンド
commands:
  report-coverage:
    description: |
      Store coverage report as an artifact and send it to Codecov service.
      カバレッジレポートをアーティファクトとして保存し、Codecovサービスに送信する
    steps:
      - store_artifacts:
          path: coverage
      - run: npx nyc report --reporter=text || true
      - codecov/upload:
          file: coverage/coverage-final.json

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Workflows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# parallelism は Free plan だと4つまで
linux-workflow: &linux-workflow
  jobs:
    # Setup
    #  1. Install Cypress
    #  2. Validate types
    #  3. Run server unit-tests
    - cypress/install:
        name: "Setup Linux"
        yarn: true
        executor: with-chrome-and-firefox
        build: "yarn build:ci"
        post-steps:
          - run:
              name: Print machine info ℹ️
              command: yarn cypress info
          - run:
              name: Check Types
              command: yarn types
          - run:
              name: Lint Files
              command: yarn lint
          - run:
              name: Run Unit Tests
              command: yarn test:unit:ci

    # Run API tests against backend server
    - cypress/run:
        name: "API Tests"
        browser: chrome
        spec: cypress/tests/api/*
        executor: with-chrome-and-firefox
        wait-on: "http://localhost:3000"
        yarn: true
        start: yarn start:ci
        record: true
        parallel: true
        parallelism: 4
        ci-build-id: ${CIRCLE_SHA1:0:8}
        group: API
        requires:
          - Setup Linux
        post-steps:
          - report-coverage
        env: "coverage=true"

    # Run E2E tests in Chrome
    - cypress/run:
        name: "UI Tests - Chrome"
        browser: chrome
        spec: cypress/tests/ui/*
        executor: with-chrome-and-firefox
        wait-on: "http://localhost:3000"
        command-prefix: npx percy exec --
        yarn: true
        start: yarn start:ci
        record: true
        parallel: true
        parallelism: 4
        ci-build-id: ${CIRCLE_SHA1:0:8}
        group: "UI - Chrome"
        requires:
          - Setup Linux
        post-steps:
          - report-coverage
        env: "coverage=true"

    # Run E2E tests in Chrome with mobile device viewport
    - cypress/run:
        name: "UI Tests - Chrome - Mobile"
        browser: chrome
        spec: cypress/tests/ui/*
        config: "viewportWidth=375,viewportHeight=667"
        executor: with-chrome-and-firefox
        wait-on: "http://localhost:3000"
        yarn: true
        start: yarn start:ci
        record: true
        parallel: true
        parallelism: 4
        ci-build-id: ${CIRCLE_SHA1:0:8}
        group: "UI - Chrome - Mobile"
        requires:
          - Setup Linux
        post-steps:
          - report-coverage
        env: "coverage=true"

    # Run E2E tests in Firefox
    - cypress/run:
        name: "UI Tests - Firefox"
        browser: firefox
        spec: cypress/tests/ui/*
        executor: with-chrome-and-firefox
        wait-on: "http://localhost:3000"
        yarn: true
        start: yarn start:ci
        record: true
        parallel: true
        parallelism: 4
        ci-build-id: ${CIRCLE_SHA1:0:8}
        group: "UI - Firefox"
        requires:
          - Setup Linux
        post-steps:
          - report-coverage
        env: "coverage=true"

    # Run E2E tests in Firefox with mobile device viewport
    - cypress/run:
        name: "UI Tests - Firefox - Mobile"
        browser: firefox
        spec: cypress/tests/ui/*
        config: viewportWidth=375,viewportHeight=667
        executor: with-chrome-and-firefox
        wait-on: "http://localhost:3000"
        yarn: true
        start: yarn start:ci
        record: true
        parallel: true
        parallelism: 4
        ci-build-id: ${CIRCLE_SHA1:0:8}
        group: "UI - Firefox - Mobile"
        requires:
          - Setup Linux
        post-steps:
          - report-coverage
        env: "coverage=true"

workflows:
  linux:
    <<: *linux-workflow
